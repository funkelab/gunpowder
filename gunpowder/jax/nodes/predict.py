import logging
import pickle
from typing import Dict, Union
import jax

from gunpowder.array import ArrayKey, Array
from gunpowder.array_spec import ArraySpec
from gunpowder.nodes.buffered_predict import BufferedPredict
from gunpowder.jax import GenericJaxModel

logger = logging.getLogger(__name__)


class Predict(BufferedPredict):
    '''JAX implementation of :class:`gunpowder.nodes.Predict`.

    Args:

        model (subclass of ``gunpowder.jax.GenericJaxModel``):

            The model to use for prediction.

        inputs (``dict``, ``string`` -> :class:`ArrayKey`):

            Dictionary from the names of input tensors in the network to
            array keys.

        outputs (``dict``, ``string`` -> :class:`ArrayKey`):

            Dictionary from the names of output tensors in the network to array
            keys. New arrays will be generated by this node for each entry (if
            requested downstream).

        array_specs (``dict``, :class:`ArrayKey` -> :class:`ArraySpec`, optional):

            Used to set the specs of generated arrays (``outputs``). This is
            useful to set the ``voxel_size``, for example, if they differ from
            the voxel size of the input arrays. Only fields that are not
            ``None`` in the given :class:`ArraySpec` will be used.

        checkpoint (``string``):

            Basename of a `GenericJaxModel` checkpoint.

        skip_empty (``bool``, optional):

            Skip prediction, if all inputs are empty (contain only 0). In this
            case, outputs are simply set to 0.

        max_shared_memory (``int``, optional):

            The maximal amount of shared memory in bytes to allocate to send
            batches to the GPU processes. Defaults to 1GB.
    '''

    def __init__(
            self,
            model: GenericJaxModel,
            inputs: Dict[str, ArrayKey],
            outputs: Dict[Union[str, int], ArrayKey],
            array_specs: Dict[ArrayKey, ArraySpec] = None,
            checkpoint: str = None,
            skip_empty=False,
            max_shared_memory=1024*1024*1024):

        self.model = model
        self.checkpoint = checkpoint
        self.model_params = None

        super().__init__(
            inputs,
            outputs,
            array_specs,
            skip_empty,
            max_shared_memory)

    def _init_model(self):

        if self.checkpoint is not None:
            with open(self.checkpoint, 'rb') as f:
                self.model_params = pickle.load(f)

    def _compute_prediction(self, input_data):

        return jax.jit(self.model.forward)(self.model_params, input_data)
